Abandon your concepts of how education works

High School/College is built to work very differently from a bootcamp

traditional education is built upon the idea that students don't want to be there.

consequently, we have grades

we become enslaved to other people's evaluation of ourselves and develop no internal motivation of our own

Teaching Coding is very different from teaching most subjects

This is why many famous programmers have dropped out of school
Focus just on what you're working on today. If you expand to the big picture, it can be overwhelming

Knowledge really settles in during project time
Homework

Check your work by figuring out ways to test your answers to see if they are correct. Don't wait for feedback.
You should be able to answer the question "did I do it right?" on your own.

In the real world, you'll need to figure out how to test your code to see if it works. You won't have someone to read your code and tell you if you did it right.

There is no "best" solution. Ultimately, the only thing that matters is, "does it work?"

Code "quality" (how you write code) doesn't matter as a jr developer. Only your ability to solve problems matters


Nothing is difficult, just unfamiliar

Don't be afraid to ask questions or let us know when you're stuck


Intensity, intensity, intensity

you're not going to get out of this class with total fluency. This is just the first 1000 words you need in order to survive in the "country"
imagine being dropped in a country with no knowledge of the language, how much would you have learned in 3 months?

Don't focus on getting the certificate, focus on learning as much as possible


In reality, most devs who interview you will go into the interview believing you're unqualified due to lack of experience
Your ability to problem solve on the spot and talk thoughtfully about your code is going to be what changes their minds
Figure out what kind of learner you are




growth mindset vs fixed mindset

growth mindset
people who believe that ability can be learned are highly successful
fixed mindset
people believe that ability is something you're born with are not successful
focus on the learning process, not on the results of your current task
you'll succeed more and have more fun
different types of fixed mindsets. Monitor your reactions for these feelings:
You’re Wrong I Rule: person is unable to accept that they did something wrong
You’re Right I Suck: any criticism immediately sends person into feeling like they're worthless
Blame it On The Rain: any mistake a person makes is explained away by circumstance. The person believes this won't happen again, so there's no need to correct the issue
Optimist Without a Cause: criticism is not important, given everything else that went well
Programming is like writing an essay in a language you don't know. Know what you want to say and then research how to say it

come up with the solution to a problem on your own and then research any syntax you might need in order to implement it. Do not research the answer to the problem itself

Help out everyone. 

Plagiarism (passing someone else's off as your own) will only result in you getting job that you're unqualified for and will get fired from


Practice learning on your own

This will be your life when you start work
the chances that you'll be using the exact tech we teach you is slim even though we pick popular tech to teach
the concepts that we teach will be the same for your entire life
tech changes, concepts don't
We teach you to teach yourself and provide hints along the way
Most of development is coming across something you've never seen and figuring it out on your own
Don't worry about what is the most optimal thing to study. As long as you're focused, whatever you study will be great
Projects and grades mean nothing

No interviewer will be impressed by your projects or your grades. That's because you're still just starting out as a developer
They will, however, be impressed if you can answer interview questions and talk thoughtfully about your code
The education and knowledge you gain from projects, homework, labs, etc is what will get you past an interview. Not the actual work itself
Don't compare yourself with other students. This is not school, where everyone comes in with roughly equivalent experience

There is plenty of work available for graduates at all levels, as long as you fully understand the work you present to employers
Don't let problems/questions of any kind (programming or personal) fester. Bring them up immediately to an IA or an IL

We only "open the doors" you have to walk through the door. We guide you, but you'll have to do most of the work.

It's like bowling. We're the bumpers, but you have the throw the ball
Learning how to debug your own code and read documentation/articles/forums takes practice. This is not really something that can be taught. Make sure you struggle and read a lot on the internet on your own time. Don't immediately ask for help

Development is like creating a recipe, it's just a series of basic steps

Learn what kind of mistakes you make

Type things out, don't copy and paste. Copy and pasting takes your mind off of what you're doing.

There is a disconnect between knowing something at a conceptual level and being able to use it. Make sure you can do both

Just because you can look at code and understand it, doesn't mean you can build something like it
It's like having the recipe for baking a really complex desert. Just because you have the steps, doesn't mean it won't burn
We create increasing levels of independence: lecture (very hands on) -> lab -> homework -> project (very hands off)

This is to ease you into what it will be like in real life
Your community of students is the best aspect of GA. They will help you with finding work and help you when you are stuck on a problem at work

Explaining something to someone else is the best way to fully understand something
Learners teaching learners is stressed in educational books
There will always be some kind of a disconnect between someone with more experience and someone with less experience.
This is especially pronounced here where months later you're a completely different person
ILs, IAs, and TAs are great, but nothing beats talking with someone in the same position as you talk to you
Share your bugs and mistakes

Prepares everyone for finding mistakes in other people's code
Class restrictions like attendance might seem silly, but we're trying to produce people who can show up on time for a meeting. Soft skills.


Try to fail as much as possible now

It will prepare you for being calm while failing on job
Attitude is very important when working
Most companies will not tolerate someone who freaks out or gets nasty during times of stress
It will make you faster at finding your own faults
What you really get out of this class: learning to learn, being methodical, reading tech docs, debugging, and how to stay calm under pressure
